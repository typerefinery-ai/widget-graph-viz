---
description: 
globs: 
alwaysApply: true
---
# Governance: Issue Management Workflow

## Issue Management Strategy

### Issue Creation Process
- Use GitHub CLI (`gh`) for issue management
- Create issues for all bugs, features, and development tasks
- Use appropriate labels and assignees
- Reference existing issues when creating related ones

### Issue Categories
- **Bug Reports**: Issues with existing functionality
- **Feature Requests**: New functionality or improvements
- **Development Tasks**: Technical debt, refactoring, testing
- **Documentation**: README updates, code comments, guides

### GitHub CLI Commands
```bash
# Create issue with body from file
gh issue create --title "Title" --body-file issue_body.txt --label "bug,high-priority"

# Create issue with inline body
gh issue create --title "Title" --body "Description" --label "feature"

# List issues
gh issue list --state open --label "bug"

# Update issue
gh issue edit 123 --body "Updated description"
```

## Issue Templates

### Bug Report Template
```markdown
## Bug Description
Brief description of the issue

## Steps to Reproduce
1. Step 1
2. Step 2
3. Step 3

## Expected Behavior
What should happen

## Actual Behavior
What actually happens

## Environment
- OS: Windows/Linux/macOS
- Version: X.X.X

## Additional Context
Any other relevant information
```

### Feature Request Template
```markdown
## Feature Description
Brief description of the requested feature

## Use Case
Why this feature is needed

## Proposed Implementation
How this could be implemented

## Acceptance Criteria
- [ ] Criterion 1
- [ ] Criterion 2
- [ ] Criterion 3

## Additional Context
Any other relevant information
```

## Issue Tracking Integration

### Task List Integration
- Task list tracks high-level project status
- GitHub issues track specific implementation details
- Keep task list focused on project milestones
- Move detailed development tasks to GitHub issues

### Label Strategy
- **Priority**: `high-priority`, `medium-priority`, `low-priority`
- **Type**: `bug`, `feature`, `enhancement`, `documentation`
- **Component**: `core`, `testing`, `pipeline`, `api`
- **Status**: `ready`, `in-progress`, `blocked`, `needs-review`

## Workflow Integration

### Development Workflow
1. Create GitHub issue for new task
2. Reference issue in commit messages
3. Update issue status as work progresses
4. Close issue when complete

### Testing Integration
- Create issues for test failures
- Reference test files in issue descriptions
- Track test improvements as separate issues

### Pipeline Integration
- Monitor CI/CD for failures
- Create issues for pipeline problems
- Track deployment and release issues

## Issue Maintenance

### Regular Reviews
- Review open issues weekly
- Update stale issues
- Close completed issues
- Merge duplicate issues

### Issue Cleanup
- Remove outdated labels
- Update issue templates
- Archive resolved issues
- Maintain issue searchability
