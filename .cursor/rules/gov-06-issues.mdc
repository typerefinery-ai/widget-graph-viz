---
description: 
globs: 
alwaysApply: true
---
# Governance: Issue Management Workflow

## Issue Management Strategy

### MANDATORY: Ticket Scope Review Process

**CRITICAL RULE**: Before creating any new issue, you MUST review existing tickets for scope overlap.

#### 1. Scope Review Process (MANDATORY)
When receiving a request:
1. **Review Current Work**: Check what you're currently working on
2. **Identify Ticket Scope**: Determine if request fits within existing GitHub issue
3. **Add to Existing Ticket**: If related, add new detail to existing issue
4. **Create New Ticket**: If no existing ticket covers the scope, create new one

#### 2. Scope Management Rules
- **Related Work**: Group related functionality in same ticket
- **Different Scope**: Create separate tickets for different functionality areas
- **No Duplicates**: Avoid creating multiple tickets for same scope
- **Complete Tracking**: Ensure all work is properly documented

#### 3. Scope Identification Criteria
- **Feature Area**: Same feature or component
- **Functionality**: Related functionality or behavior
- **Dependencies**: Work that depends on each other
- **Timeline**: Work that should be completed together

### Issue Creation Process
- Use GitHub CLI (`gh`) for issue management
- Create issues for all bugs, features, and development tasks
- Use appropriate labels and assignees
- Reference existing issues when creating related ones

### Issue Categories
- **Bug Reports**: Issues with existing functionality
- **Feature Requests**: New functionality or improvements
- **Development Tasks**: Technical debt, refactoring, testing
- **Documentation**: README updates, code comments, guides

### GitHub CLI Commands
```bash
# Create issue with body from file
gh issue create --title "Title" --body-file issue_body.txt --label "bug,high-priority"

# Create issue with inline body
gh issue create --title "Title" --body "Description" --label "feature"

# List issues
gh issue list --state open --label "bug"

# Update issue
gh issue edit 123 --body "Updated description"
```

## Issue Templates

### Bug Report Template
```markdown
## Bug Description
Brief description of the issue

## Steps to Reproduce
1. Step 1
2. Step 2
3. Step 3

## Expected Behavior
What should happen

## Actual Behavior
What actually happens

## Environment
- OS: Windows/Linux/macOS
- Version: X.X.X

## Additional Context
Any other relevant information
```

### Feature Request Template
```markdown
## Feature Description
Brief description of the requested feature

## Use Case
Why this feature is needed

## Proposed Implementation
How this could be implemented

## Acceptance Criteria
- [ ] Criterion 1
- [ ] Criterion 2
- [ ] Criterion 3

## Additional Context
Any other relevant information
```

## Issue Tracking Integration

### Task List Integration
- Task list tracks high-level project status
- GitHub issues track specific implementation details
- Keep task list focused on project milestones
- Move detailed development tasks to GitHub issues

### Label Strategy
- **Priority**: `high-priority`, `medium-priority`, `low-priority`
- **Type**: `bug`, `feature`, `enhancement`, `documentation`
- **Component**: `core`, `testing`, `pipeline`, `api`
- **Status**: `ready`, `in-progress`, `blocked`, `needs-review`

## Workflow Integration

### Development Workflow
1. Review existing tickets for scope overlap
2. Add to existing ticket or create new one
3. Reference issue in commit messages
4. Update issue status as work progresses
5. Close issue when complete

### Testing Integration
- Create issues for test failures
- Reference test files in issue descriptions
- Track test improvements as separate issues

### Pipeline Integration
- Monitor CI/CD for failures
- Create issues for pipeline problems
- Track deployment and release issues

## Issue Maintenance

### Regular Reviews
- Review open issues weekly
- Update stale issues
- Close completed issues
- Merge duplicate issues

### Issue Cleanup
- Remove outdated labels
- Update issue templates
- Archive resolved issues
- Maintain issue searchability

### Scope Management
- Group related issues together
- Avoid scope creep in individual issues
- Split large issues into smaller, focused ones
- Maintain clear scope boundaries
